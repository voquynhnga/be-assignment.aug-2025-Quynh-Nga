services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-taskapp}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-taskapp123}
      POSTGRES_DB: ${DB_NAME:-taskdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - task_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taskapp} -d ${DB_NAME:-taskdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: task_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - task_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task_app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-taskapp}
      - DB_PASSWORD=${DB_PASSWORD:-taskapp123}
      - DB_NAME=${DB_NAME:-taskdb}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - ENVIRONMENT=development
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - task_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: task_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./uploads:/app/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - task_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  task_network:
    driver: bridge